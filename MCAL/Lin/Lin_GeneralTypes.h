/**
 * @file        Lin_GeneralTypes.h
 * @author      Phuc
 * @brief       LIN general types header file in AUTOSAR
 * @version     1.0
 * @date        2025-01-15
 * 
 * @copyright   Copyright (c) 2025
 * 
 */

#ifndef LIN_GENERALTYPES_H
#define LIN_GENERALTYPES_H

/*
 ************************************************************************************************************
 * Includes
 ************************************************************************************************************
 */
#include "Std_Types.h"

/*
 ************************************************************************************************************
 * Types and Defines
 ************************************************************************************************************
 */
/**
 * @typedef     Lin_FramePidType
 * @brief       Represents all valid protected identifier used by Lin_SendFrame()
 */
typedef uint8 Lin_FramePidType; /* Range: 0...0xFE */

/**
 * @typedef     Lin_FrameCsModelType
 * @brief       This type is used to specify the Checksum model to be used for the LIN Frame.
 */
typedef enum
{
    LIN_ENHANCED_CS, /* Enhanced checksum model */
    LIN_CLASSIC_CS   /* Classic checksum model */
} Lin_FrameCsModelType;

/**
 * @typedef     Lin_FrameResponseType
 * @brief       This type is used to specify whether the frame processor is required to transmit the response part
 *              of the LIN frame.
 */
typedef enum
{
    LIN_FRAMERESPONSE_TX,    /* Response generated by this node */
    LIN_FRAMERESPONSE_RX,    /* Response generated by another node and relevant to this node */
    LIN_FRAMERESPONSE_IGNORE /* Response generated by another node and not relevant to this node */
} Lin_FrameResponseType;

/**
 * @typedef     Lin_FrameDlType
 * @brief       This type is used to specify the number of SDU data bytes to copy
 */
typedef uint8 Lin_FrameDlType; /* Range: 1...8 */

/**
 * @typedef     Lin_FrameDlType
 * @brief       This Type is used to provide PID, checksum model, data length and SDU pointer from the LIN Interface to the LIN driver.
 */
typedef struct
{
    Lin_FramePidType Pid;
    Lin_FrameCsModelType Cs;
    Lin_FrameResponseType Drc;
    Lin_FrameDlType Dl;
    uint8 *SduPtr;
} Lin_PduType;

/**
 * @typedef     Lin_StatusType
 * @brief       LIN operation states for a LIN channel or frame, as returned by the API service Lin_GetStatus().
 */
typedef enum
{
    LIN_NOT_OK,          /* Error occurred during operation */
    LIN_TX_OK,           /* Transmission successful */
    LIN_RX_OK,           /* Correct response received */
    LIN_TX_BUSY,         /* Transmitting */
    LIN_TX_HEADER_ERROR, /* Error during header transmission */
    LIN_TX_ERROR,        /* Error during response transmission */
    LIN_RX_BUSY,         /* Receiving data */
    LIN_RX_ERROR,        /* Error during data reception */
    LIN_RX_NO_RESPONSE,  /* No response received */
    LIN_OPERATIONAL,     /* Normal operational state */
    LIN_CH_SLEEP         /* Sleep state of the channel */
} Lin_StatusType;

/**
 * @typedef     Lin_SlaveErrorType
 * @brief       This type represents the slave error types that are detected during header reception and response transmission / reception.
 */
typedef enum
{
    LIN_ERR_HEADER,       /* Header error */
    LIN_ERR_RESP_STOPBIT, /* Framing error in response */
    LIN_ERR_RESP_CHKSUM,  /* Checksum error */
    LIN_ERR_RESP_DATABIT, /* Data bit monitoring error in response */
    LIN_ERR_NO_RESP,      /* No response */
    LIN_ERR_INC_RESP      /* Incomplete response */
} Lin_SlaveErrorType;

/*
 ************************************************************************************************************
 * Inline functions
 ************************************************************************************************************
 */



/*
 ************************************************************************************************************
 * Functions declaration
 ************************************************************************************************************
 */



#endif /* LIN_GENERALTYPES_H */